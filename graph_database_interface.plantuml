package graph_db_interface {
  package querying {
    interface SingleVertexQuerying {
    + get_vertex_type(&self, id: Uuid)->Vertex
    + get_all_properties(&self, id: Uuid)->Vertex
    + get_property_value(&self, id: Uuid, property_name: String)->Vertex
    }
  }
  package vertexes {
    class Vertex {
      + id: Uuid
      + type: String
      + properties: Vec<Property>
      + default() -> Vertex
    }
    class Property {
      + name: String
      + value: String
      + default() -> Property
    }

    enum Value {
      Bool(bool)
      Integer(usize)
      String(String)
      + try_from(&self, value: Value) -> Result<Bool, ConversionError>
      + try_from(&self, value: Value) -> Result<Integer, ConversionError>
      + try_from(&self, value: Value) -> Result<String, ConversionError>
    }

    enum ConversionError {
      WrongInputType
      InvalidValue
      + Display()
    }
    Vertex --o Property
    Property --o Value
    Value --o ConversionError
  }
  SingleVertexQuerying --o Vertex
}
package std {
  package fmt {
    interface Debug {
      + debug(&self, f: &mut Formatter) -> Result<(), Error>
    }
    interface Display {
      + display(&self, f: &mut Formatter) -> Result<(), Error>
    }
  }
  package error {
    interface Error {}
  }
  package convert {
    interface TryFrom{
      + try_from(value: A) -> Result<T,E>
    }
  }
}
